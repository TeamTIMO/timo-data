{
  "stats": {
    "suites": 15,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2018-01-08T15:11:31.976Z",
    "end": "2018-01-08T15:11:34.259Z",
    "duration": 2283,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "UT02: API",
        "suites": [
          {
            "title": "UT02-01: GET /",
            "suites": [],
            "tests": [
              {
                "title": "UT02-01-01: Should List all Entries",
                "fullTitle": "UT02: API UT02-01: GET / UT02-01-01: Should List all Entries",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "420fbdf8-82b1-43af-9707-4eb896466585",
                "parentUUID": "25927c36-507e-454c-aeb9-26fc2c56e53d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "25927c36-507e-454c-aeb9-26fc2c56e53d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-01-01: Should List all Entries",
                "fullTitle": "UT02: API UT02-01: GET / UT02-01-01: Should List all Entries",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "420fbdf8-82b1-43af-9707-4eb896466585",
                "parentUUID": "25927c36-507e-454c-aeb9-26fc2c56e53d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 31,
            "rootEmpty": false
          },
          {
            "title": "UT02-02: GET /sources",
            "suites": [],
            "tests": [
              {
                "title": "UT02-02-01: Should List all sources",
                "fullTitle": "UT02: API UT02-02: GET /sources UT02-02-01: Should List all sources",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/sources').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('local') < 0) {\n    done(new Error('Source local missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Source youtube missing'))\n  }\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "216ce311-9edc-4d49-a9ee-077c91096a2a",
                "parentUUID": "70f14030-34ae-4fe1-b681-5ccc174001b1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "70f14030-34ae-4fe1-b681-5ccc174001b1",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-02-01: Should List all sources",
                "fullTitle": "UT02: API UT02-02: GET /sources UT02-02-01: Should List all sources",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/sources').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('local') < 0) {\n    done(new Error('Source local missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Source youtube missing'))\n  }\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "216ce311-9edc-4d49-a9ee-077c91096a2a",
                "parentUUID": "70f14030-34ae-4fe1-b681-5ccc174001b1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "UT02-03: GET /:id",
            "suites": [],
            "tests": [
              {
                "title": "UT02-03-01: Should get entry by id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-01: Should get entry by id",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "df414545-f059-4f87-9310-8e56fe337526",
                "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Should get 404 on wrong id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f8331544-5167-425b-b0cd-3753ca47fd0f",
                "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "f55c4bdf-a688-4610-8169-288897662842",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-03-01: Should get entry by id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-01: Should get entry by id",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "df414545-f059-4f87-9310-8e56fe337526",
                "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Should get 404 on wrong id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f8331544-5167-425b-b0cd-3753ca47fd0f",
                "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 9,
            "rootEmpty": false
          },
          {
            "title": "UT02-04: POST /",
            "suites": [],
            "tests": [
              {
                "title": "UT02-04-01: Should Add an Entry",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-01: Should Add an Entry",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e9f53d0c-987c-4186-a949-05836ec15309",
                "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-04-02: Should Error on no Data in Post",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c7833677-d7ab-4d52-8a11-2d3ca025a3d5",
                "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-04-01: Should Add an Entry",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-01: Should Add an Entry",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e9f53d0c-987c-4186-a949-05836ec15309",
                "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-04-02: Should Error on no Data in Post",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c7833677-d7ab-4d52-8a11-2d3ca025a3d5",
                "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 40,
            "rootEmpty": false
          },
          {
            "title": "UT02-05: PUT /:id",
            "suites": [],
            "tests": [
              {
                "title": "UT02-05-01: Should Update an Entry",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7f7b7d0b-45c3-433e-8b00-f8716f49248b",
                "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-02: Should Error on no Data in PUT",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "758c7772-baeb-4931-bf62-5d1e2ba5bbcc",
                "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-03: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2df02834-29c4-4ebf-9928-2d6e2203ff80",
                "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "c49b25ba-f272-459e-b04a-9abda6c804b6",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-05-01: Should Update an Entry",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7f7b7d0b-45c3-433e-8b00-f8716f49248b",
                "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-02: Should Error on no Data in PUT",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "758c7772-baeb-4931-bf62-5d1e2ba5bbcc",
                "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-03: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2df02834-29c4-4ebf-9928-2d6e2203ff80",
                "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 31,
            "rootEmpty": false
          },
          {
            "title": "UT02-06: DELETE /:id",
            "suites": [],
            "tests": [
              {
                "title": "UT02-06-01: Should Delete an Account",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-01: Should Delete an Account",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c024ce17-040f-4016-bfb0-857903970dcc",
                "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-06-02: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "13ba07c1-e298-4e23-9403-2659e7db1e62",
                "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-06-01: Should Delete an Account",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-01: Should Delete an Account",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c024ce17-040f-4016-bfb0-857903970dcc",
                "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-06-02: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "13ba07c1-e298-4e23-9403-2659e7db1e62",
                "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 20,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/test.api.js",
        "uuid": "31ce8be5-69c8-478a-8028-b70a8746d2f8",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "UT02: API \"before all\" hook",
            "timedOut": false,
            "duration": 1050,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.copyFile(dbSourcePath, dbPath, function (err) {\n  if (err) {\n    done(err)\n  } else {\n    server = spawn('node', ['./app.js', dbPath, testPort])\n    setTimeout(function () {\n      done()\n    }, 1000)\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "9599cac5-b36e-4af4-8bc1-f1c30922305a",
            "parentUUID": "31ce8be5-69c8-478a-8028-b70a8746d2f8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "UT02: API \"after all\" hook",
            "timedOut": false,
            "duration": 1002,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.kill('SIGHUP')\nsetTimeout(function () {\n  fs.unlink(dbPath, function (error) {\n    if (error) {\n      done(error)\n    } else {\n      done()\n    }\n  })\n}, 1000)",
            "err": {},
            "isRoot": false,
            "uuid": "2f6e113c-6735-4557-93a5-1dcd1ea690c2",
            "parentUUID": "31ce8be5-69c8-478a-8028-b70a8746d2f8",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "UT01: database",
        "suites": [
          {
            "title": "UT01-01: Object Contructor",
            "suites": [],
            "tests": [
              {
                "title": "UT01-01-01: should return an error with no path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-01: should return an error with no path",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "71d9ff9f-aa46-4004-8264-1478e6fb5b87",
                "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: should return an database object with a correct path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
                "err": {},
                "isRoot": false,
                "uuid": "0143a7f9-e873-4cf4-8515-6796c4c3ca26",
                "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "ce4cc400-6fe8-46cc-a266-55c402475387",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-01-01: should return an error with no path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-01: should return an error with no path",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "71d9ff9f-aa46-4004-8264-1478e6fb5b87",
                "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: should return an database object with a correct path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
                "err": {},
                "isRoot": false,
                "uuid": "0143a7f9-e873-4cf4-8515-6796c4c3ca26",
                "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "UT01-02: database.list",
            "suites": [],
            "tests": [
              {
                "title": "UT01-02-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "2ee2b758-1257-4379-9cc0-3e8a6fb0ff48",
                "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-02-02: should callback all entries",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-02: should callback all entries",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b09b4771-a062-4823-b199-41c717dec9eb",
                "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "UT01: database UT01-02: database.list \"before all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "f942a5c4-f15a-4bcb-88d3-f866a5506851",
                "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-02-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "2ee2b758-1257-4379-9cc0-3e8a6fb0ff48",
                "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-02-02: should callback all entries",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-02: should callback all entries",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b09b4771-a062-4823-b199-41c717dec9eb",
                "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT01-03: database.sources",
            "suites": [],
            "tests": [
              {
                "title": "UT01-03-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-03: database.sources UT01-03-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.sources()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "8ed8b587-97c7-4202-a707-6585a5c9df09",
                "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-02: should callback all sources",
                "fullTitle": "UT01: database UT01-03: database.sources UT01-03-02: should callback all sources",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.sources(function (error, sources) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(sources.length, 2)\n    if (sources.indexOf('local') < 0) {\n      done(new Error('Source local missing'))\n    }\n    if (sources.indexOf('youtube') < 0) {\n      done(new Error('Source youtube missing'))\n    }\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "df97fdfd-a468-4d31-98c1-a9bbfe316961",
                "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-03-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-03: database.sources UT01-03-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.sources()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "8ed8b587-97c7-4202-a707-6585a5c9df09",
                "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-02: should callback all sources",
                "fullTitle": "UT01: database UT01-03: database.sources UT01-03-02: should callback all sources",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.sources(function (error, sources) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(sources.length, 2)\n    if (sources.indexOf('local') < 0) {\n      done(new Error('Source local missing'))\n    }\n    if (sources.indexOf('youtube') < 0) {\n      done(new Error('Source youtube missing'))\n    }\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "df97fdfd-a468-4d31-98c1-a9bbfe316961",
                "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT01-04: database.getEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-04-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "05579234-30c8-40c2-879f-04fdd9aaaa0b",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-02: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "deb7e5ea-8631-4e23-a713-df3a28a85bde",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-03: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "27876246-eeca-40f2-b605-9aaa9d3b88b5",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-04: should callback an object with a correct id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a1dc99b6-a15c-4d6a-98c4-23932b871e97",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-04: database.getEntry \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "8b3d117e-502b-48ac-a2d4-4882b2d276fc",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-04: database.getEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "694ad5a1-3c40-49df-996a-243f0d4a0d8f",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-04-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "05579234-30c8-40c2-879f-04fdd9aaaa0b",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-02: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "deb7e5ea-8631-4e23-a713-df3a28a85bde",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-03: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "27876246-eeca-40f2-b605-9aaa9d3b88b5",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-04: should callback an object with a correct id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a1dc99b6-a15c-4d6a-98c4-23932b871e97",
                "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT01-05: database.addEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-05-01: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "73c6a33c-1556-4796-84f8-c87bc168d9d3",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4e3da6e4-55e4-4619-9236-aa5f81e5212d",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-03: should callback an object with data given and database should contain this object",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "41b4b496-acb1-4a7b-9c6b-ee1abdea76ce",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "dc401c86-20d2-495c-85e7-9724049e505c",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-05: database.addEntry \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "11ecaf47-1272-490f-89e2-7936af000d64",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-05: database.addEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "5d48eff5-83b4-4460-aaf7-9361b3bfc221",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-05-01: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "73c6a33c-1556-4796-84f8-c87bc168d9d3",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4e3da6e4-55e4-4619-9236-aa5f81e5212d",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-03: should callback an object with data given and database should contain this object",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "41b4b496-acb1-4a7b-9c6b-ee1abdea76ce",
                "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6,
            "rootEmpty": false
          },
          {
            "title": "UT01-06: database.updateEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-06-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "f896981e-89e4-4f95-a7d5-d4f3ee7a5b5b",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-02: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "712bd92f-7530-4bb8-af40-ca700e5b8e12",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-03: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "98b604d6-4ab4-4d72-8515-0aa462e836f9",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-04: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "43dd8fda-3368-4318-85f4-7fc97c7d7367",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e1ba4cf5-6a74-42f0-a50f-7355d4e8c9b1",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-06: database.updateEntry \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "47b787b2-8a90-4364-8324-29a677bdb8e9",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-06: database.updateEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "278be830-d1e4-4c56-954b-89e8f65d0bc0",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-06-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "f896981e-89e4-4f95-a7d5-d4f3ee7a5b5b",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-02: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "712bd92f-7530-4bb8-af40-ca700e5b8e12",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-03: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "98b604d6-4ab4-4d72-8515-0aa462e836f9",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-04: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "43dd8fda-3368-4318-85f4-7fc97c7d7367",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e1ba4cf5-6a74-42f0-a50f-7355d4e8c9b1",
                "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 7,
            "rootEmpty": false
          },
          {
            "title": "UT01-07: database.deleteEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-07-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5916f334-5d7c-493a-8697-ffe90abdd436",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "cd377337-e6a4-483c-9356-05c6dc1a150b",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-03: should callback true with id given and database should not contain this object",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3d90db64-7424-47bf-bf01-2207ce03846e",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "f0e5880c-5f49-46d0-992e-0edb162dc660",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "c798abea-0f1d-467f-8787-b9a5e8150a98",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-07-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5916f334-5d7c-493a-8697-ffe90abdd436",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "cd377337-e6a4-483c-9356-05c6dc1a150b",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-03: should callback true with id given and database should not contain this object",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3d90db64-7424-47bf-bf01-2207ce03846e",
                "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/test.database.js",
        "uuid": "fb301a64-11e0-4819-9761-294f975629f8",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: UT01-00: Copy TestDatabase",
            "fullTitle": "UT01: database \"before all\" hook: UT01-00: Copy TestDatabase",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.copyFile(dbSourcePath, dbPath, function (err) {\n  if (err) {\n    done(err)\n  } else {\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "dd86ae97-797b-42ca-9468-4d77cb57cb2e",
            "parentUUID": "fb301a64-11e0-4819-9761-294f975629f8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: UT01-99: remove Copy of Database",
            "fullTitle": "UT01: database \"after all\" hook: UT01-99: remove Copy of Database",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.unlink(dbPath, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "c45fd6e3-291a-4608-8934-fdcf23e24a7a",
            "parentUUID": "fb301a64-11e0-4819-9761-294f975629f8",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "b85e7ebb-dc58-48cb-a184-a2fc55e1ca80",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "UT02-01-01: Should List all Entries",
      "fullTitle": "UT02-01: GET / UT02-01-01: Should List all Entries",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "420fbdf8-82b1-43af-9707-4eb896466585",
      "parentUUID": "25927c36-507e-454c-aeb9-26fc2c56e53d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Should List all sources",
      "fullTitle": "UT02-02: GET /sources UT02-02-01: Should List all sources",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/sources').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('local') < 0) {\n    done(new Error('Source local missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Source youtube missing'))\n  }\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "216ce311-9edc-4d49-a9ee-077c91096a2a",
      "parentUUID": "70f14030-34ae-4fe1-b681-5ccc174001b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Should get entry by id",
      "fullTitle": "UT02-03: GET /:id UT02-03-01: Should get entry by id",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "df414545-f059-4f87-9310-8e56fe337526",
      "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Should get 404 on wrong id",
      "fullTitle": "UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "f8331544-5167-425b-b0cd-3753ca47fd0f",
      "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Should Add an Entry",
      "fullTitle": "UT02-04: POST / UT02-04-01: Should Add an Entry",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e9f53d0c-987c-4186-a949-05836ec15309",
      "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-02: Should Error on no Data in Post",
      "fullTitle": "UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c7833677-d7ab-4d52-8a11-2d3ca025a3d5",
      "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Should Update an Entry",
      "fullTitle": "UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7f7b7d0b-45c3-433e-8b00-f8716f49248b",
      "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-02: Should Error on no Data in PUT",
      "fullTitle": "UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "758c7772-baeb-4931-bf62-5d1e2ba5bbcc",
      "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-03: Should Error on wrong ID",
      "fullTitle": "UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "2df02834-29c4-4ebf-9928-2d6e2203ff80",
      "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Should Delete an Account",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-01: Should Delete an Account",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c024ce17-040f-4016-bfb0-857903970dcc",
      "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-02: Should Error on wrong ID",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "13ba07c1-e298-4e23-9403-2659e7db1e62",
      "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-01: should return an error with no path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-01: should return an error with no path",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "71d9ff9f-aa46-4004-8264-1478e6fb5b87",
      "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: should return an database object with a correct path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
      "err": {},
      "isRoot": false,
      "uuid": "0143a7f9-e873-4cf4-8515-6796c4c3ca26",
      "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: should throw an error with no callback given",
      "fullTitle": "UT01-02: database.list UT01-02-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "2ee2b758-1257-4379-9cc0-3e8a6fb0ff48",
      "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-02: should callback all entries",
      "fullTitle": "UT01-02: database.list UT01-02-02: should callback all entries",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "b09b4771-a062-4823-b199-41c717dec9eb",
      "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-01: should throw an error with no callback given",
      "fullTitle": "UT01-03: database.sources UT01-03-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.sources()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "8ed8b587-97c7-4202-a707-6585a5c9df09",
      "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-02: should callback all sources",
      "fullTitle": "UT01-03: database.sources UT01-03-02: should callback all sources",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.sources(function (error, sources) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(sources.length, 2)\n    if (sources.indexOf('local') < 0) {\n      done(new Error('Source local missing'))\n    }\n    if (sources.indexOf('youtube') < 0) {\n      done(new Error('Source youtube missing'))\n    }\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "df97fdfd-a468-4d31-98c1-a9bbfe316961",
      "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-01: should throw an error with no callback given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "05579234-30c8-40c2-879f-04fdd9aaaa0b",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-02: should throw an error with no id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "deb7e5ea-8631-4e23-a713-df3a28a85bde",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-03: should callback an error with a not existing id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "27876246-eeca-40f2-b605-9aaa9d3b88b5",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-04: should callback an object with a correct id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a1dc99b6-a15c-4d6a-98c4-23932b871e97",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-01: should throw an error with no data given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "73c6a33c-1556-4796-84f8-c87bc168d9d3",
      "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-02: should throw an error with no callback given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4e3da6e4-55e4-4619-9236-aa5f81e5212d",
      "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-03: should callback an object with data given and database should contain this object",
      "fullTitle": "UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "41b4b496-acb1-4a7b-9c6b-ee1abdea76ce",
      "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-01: should throw an error with no id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "f896981e-89e4-4f95-a7d5-d4f3ee7a5b5b",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-02: should throw an error with no data given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "712bd92f-7530-4bb8-af40-ca700e5b8e12",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-03: should throw an error with no callback given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "98b604d6-4ab4-4d72-8515-0aa462e836f9",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-04: should callback an error with a not existing id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "43dd8fda-3368-4318-85f4-7fc97c7d7367",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e1ba4cf5-6a74-42f0-a50f-7355d4e8c9b1",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-01: should throw an error with no id given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "5916f334-5d7c-493a-8697-ffe90abdd436",
      "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-02: should throw an error with no callback given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "cd377337-e6a4-483c-9356-05c6dc1a150b",
      "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-03: should callback true with id given and database should not contain this object",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "3d90db64-7424-47bf-bf01-2207ce03846e",
      "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "UT02-01-01: Should List all Entries",
      "fullTitle": "UT02-01: GET / UT02-01-01: Should List all Entries",
      "timedOut": false,
      "duration": 31,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "420fbdf8-82b1-43af-9707-4eb896466585",
      "parentUUID": "25927c36-507e-454c-aeb9-26fc2c56e53d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Should List all sources",
      "fullTitle": "UT02-02: GET /sources UT02-02-01: Should List all sources",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/sources').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('local') < 0) {\n    done(new Error('Source local missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Source youtube missing'))\n  }\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "216ce311-9edc-4d49-a9ee-077c91096a2a",
      "parentUUID": "70f14030-34ae-4fe1-b681-5ccc174001b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Should get entry by id",
      "fullTitle": "UT02-03: GET /:id UT02-03-01: Should get entry by id",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "df414545-f059-4f87-9310-8e56fe337526",
      "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Should get 404 on wrong id",
      "fullTitle": "UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "f8331544-5167-425b-b0cd-3753ca47fd0f",
      "parentUUID": "f55c4bdf-a688-4610-8169-288897662842",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Should Add an Entry",
      "fullTitle": "UT02-04: POST / UT02-04-01: Should Add an Entry",
      "timedOut": false,
      "duration": 32,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e9f53d0c-987c-4186-a949-05836ec15309",
      "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-02: Should Error on no Data in Post",
      "fullTitle": "UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c7833677-d7ab-4d52-8a11-2d3ca025a3d5",
      "parentUUID": "fa00e2d4-48e0-444d-9af7-3a0e86d119bf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Should Update an Entry",
      "fullTitle": "UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7f7b7d0b-45c3-433e-8b00-f8716f49248b",
      "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-02: Should Error on no Data in PUT",
      "fullTitle": "UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "758c7772-baeb-4931-bf62-5d1e2ba5bbcc",
      "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-03: Should Error on wrong ID",
      "fullTitle": "UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "2df02834-29c4-4ebf-9928-2d6e2203ff80",
      "parentUUID": "c49b25ba-f272-459e-b04a-9abda6c804b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Should Delete an Account",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-01: Should Delete an Account",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c024ce17-040f-4016-bfb0-857903970dcc",
      "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-02: Should Error on wrong ID",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "13ba07c1-e298-4e23-9403-2659e7db1e62",
      "parentUUID": "fc3f1831-5d07-41bf-af51-a0f456b9249c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-01: should return an error with no path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-01: should return an error with no path",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "71d9ff9f-aa46-4004-8264-1478e6fb5b87",
      "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: should return an database object with a correct path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
      "err": {},
      "isRoot": false,
      "uuid": "0143a7f9-e873-4cf4-8515-6796c4c3ca26",
      "parentUUID": "ce4cc400-6fe8-46cc-a266-55c402475387",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: should throw an error with no callback given",
      "fullTitle": "UT01-02: database.list UT01-02-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "2ee2b758-1257-4379-9cc0-3e8a6fb0ff48",
      "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-02: should callback all entries",
      "fullTitle": "UT01-02: database.list UT01-02-02: should callback all entries",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "b09b4771-a062-4823-b199-41c717dec9eb",
      "parentUUID": "d5c66d5f-04dc-412e-bc52-a8d4f7996714",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-01: should throw an error with no callback given",
      "fullTitle": "UT01-03: database.sources UT01-03-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.sources()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "8ed8b587-97c7-4202-a707-6585a5c9df09",
      "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-02: should callback all sources",
      "fullTitle": "UT01-03: database.sources UT01-03-02: should callback all sources",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.sources(function (error, sources) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(sources.length, 2)\n    if (sources.indexOf('local') < 0) {\n      done(new Error('Source local missing'))\n    }\n    if (sources.indexOf('youtube') < 0) {\n      done(new Error('Source youtube missing'))\n    }\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "df97fdfd-a468-4d31-98c1-a9bbfe316961",
      "parentUUID": "3255e47a-5797-4be1-ae65-3a6dd64f0e32",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-01: should throw an error with no callback given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "05579234-30c8-40c2-879f-04fdd9aaaa0b",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-02: should throw an error with no id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "deb7e5ea-8631-4e23-a713-df3a28a85bde",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-03: should callback an error with a not existing id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "27876246-eeca-40f2-b605-9aaa9d3b88b5",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-04: should callback an object with a correct id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a1dc99b6-a15c-4d6a-98c4-23932b871e97",
      "parentUUID": "afe69855-18f5-40e3-8658-2d4a9a398ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-01: should throw an error with no data given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "73c6a33c-1556-4796-84f8-c87bc168d9d3",
      "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-02: should throw an error with no callback given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4e3da6e4-55e4-4619-9236-aa5f81e5212d",
      "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-03: should callback an object with data given and database should contain this object",
      "fullTitle": "UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "41b4b496-acb1-4a7b-9c6b-ee1abdea76ce",
      "parentUUID": "dc401c86-20d2-495c-85e7-9724049e505c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-01: should throw an error with no id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "f896981e-89e4-4f95-a7d5-d4f3ee7a5b5b",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-02: should throw an error with no data given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "712bd92f-7530-4bb8-af40-ca700e5b8e12",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-03: should throw an error with no callback given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "98b604d6-4ab4-4d72-8515-0aa462e836f9",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-04: should callback an error with a not existing id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "43dd8fda-3368-4318-85f4-7fc97c7d7367",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e1ba4cf5-6a74-42f0-a50f-7355d4e8c9b1",
      "parentUUID": "0fa1d5c3-bd7e-4b0d-b41e-c71002fadf38",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-01: should throw an error with no id given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "5916f334-5d7c-493a-8697-ffe90abdd436",
      "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-02: should throw an error with no callback given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "cd377337-e6a4-483c-9356-05c6dc1a150b",
      "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-03: should callback true with id given and database should not contain this object",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "3d90db64-7424-47bf-bf01-2207ce03846e",
      "parentUUID": "0d602815-33cb-497a-82fd-44a5beb8d6c2",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}