{
  "stats": {
    "suites": 15,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2018-03-21T08:51:17.949Z",
    "end": "2018-03-21T08:51:20.276Z",
    "duration": 2327,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "UT02: API",
        "suites": [
          {
            "title": "UT02-01: GET /",
            "suites": [],
            "tests": [
              {
                "title": "UT02-01-01: Should List all Entries",
                "fullTitle": "UT02: API UT02-01: GET / UT02-01-01: Should List all Entries",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "30aa7f03-2af3-4bc4-8e17-447c26beb1b7",
                "parentUUID": "7cac05c4-d1c4-4260-83a9-65581b873359",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "7cac05c4-d1c4-4260-83a9-65581b873359",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-01-01: Should List all Entries",
                "fullTitle": "UT02: API UT02-01: GET / UT02-01-01: Should List all Entries",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "30aa7f03-2af3-4bc4-8e17-447c26beb1b7",
                "parentUUID": "7cac05c4-d1c4-4260-83a9-65581b873359",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 49,
            "rootEmpty": false
          },
          {
            "title": "UT02-02: GET /types",
            "suites": [],
            "tests": [
              {
                "title": "UT02-02-01: Should List all types",
                "fullTitle": "UT02: API UT02-02: GET /types UT02-02-01: Should List all types",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/types').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('mp3') < 0) {\n    done(new Error('Type mp3 missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Type youtube missing'))\n  }\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "696708db-467a-4940-8b44-0c0fb02f9bd3",
                "parentUUID": "c23b62c9-8e1e-4303-b83c-6d8b284d6ec2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "c23b62c9-8e1e-4303-b83c-6d8b284d6ec2",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-02-01: Should List all types",
                "fullTitle": "UT02: API UT02-02: GET /types UT02-02-01: Should List all types",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/types').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('mp3') < 0) {\n    done(new Error('Type mp3 missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Type youtube missing'))\n  }\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "696708db-467a-4940-8b44-0c0fb02f9bd3",
                "parentUUID": "c23b62c9-8e1e-4303-b83c-6d8b284d6ec2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 9,
            "rootEmpty": false
          },
          {
            "title": "UT02-03: GET /:id",
            "suites": [],
            "tests": [
              {
                "title": "UT02-03-01: Should get entry by id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-01: Should get entry by id",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "29083d6b-2dae-48c0-9e3c-e53f1b8af932",
                "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Should get 404 on wrong id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7183f976-f197-414e-a339-aa7b6ace1672",
                "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "8262c67e-f967-4d32-a036-b520d0bb8837",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-03-01: Should get entry by id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-01: Should get entry by id",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "29083d6b-2dae-48c0-9e3c-e53f1b8af932",
                "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Should get 404 on wrong id",
                "fullTitle": "UT02: API UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7183f976-f197-414e-a339-aa7b6ace1672",
                "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8,
            "rootEmpty": false
          },
          {
            "title": "UT02-04: POST /",
            "suites": [],
            "tests": [
              {
                "title": "UT02-04-01: Should Add an Entry",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-01: Should Add an Entry",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4fde1ae3-bfad-4f8f-b880-1964354ff668",
                "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-04-02: Should Error on no Data in Post",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "bcd92840-71d7-4870-94a4-6f043b61d4ab",
                "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-04-01: Should Add an Entry",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-01: Should Add an Entry",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4fde1ae3-bfad-4f8f-b880-1964354ff668",
                "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-04-02: Should Error on no Data in Post",
                "fullTitle": "UT02: API UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "bcd92840-71d7-4870-94a4-6f043b61d4ab",
                "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 36,
            "rootEmpty": false
          },
          {
            "title": "UT02-05: PUT /:id",
            "suites": [],
            "tests": [
              {
                "title": "UT02-05-01: Should Update an Entry",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "57fe7322-04ba-4376-8ee7-eed076198084",
                "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-02: Should Error on no Data in PUT",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8e6159f4-b30c-4709-b6ca-b1110795eff3",
                "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-03: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f70fab21-98fb-4f40-9a2b-34d03d3d7bd4",
                "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-05-01: Should Update an Entry",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "57fe7322-04ba-4376-8ee7-eed076198084",
                "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-02: Should Error on no Data in PUT",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8e6159f4-b30c-4709-b6ca-b1110795eff3",
                "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-03: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f70fab21-98fb-4f40-9a2b-34d03d3d7bd4",
                "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 28,
            "rootEmpty": false
          },
          {
            "title": "UT02-06: DELETE /:id",
            "suites": [],
            "tests": [
              {
                "title": "UT02-06-01: Should Delete an Entry",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-01: Should Delete an Entry",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2f7dde1e-3e65-4820-8d79-6f9af7798a08",
                "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-06-02: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "956ce1b4-e696-4ac2-9f49-2ac19fbf558c",
                "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "d52154ac-c69b-433d-8186-02c4a318b865",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-06-01: Should Delete an Entry",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-01: Should Delete an Entry",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2f7dde1e-3e65-4820-8d79-6f9af7798a08",
                "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-06-02: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "956ce1b4-e696-4ac2-9f49-2ac19fbf558c",
                "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 17,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/test.api.js",
        "uuid": "764c5086-4c77-4ad6-8bbd-a99328172680",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "UT02: API \"before all\" hook",
            "timedOut": false,
            "duration": 1050,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.copyFile(dbSourcePath, dbPath, function (err) {\n  if (err) {\n    done(err)\n  } else {\n    server = spawn('node', ['./app.js', dbPath, testPort])\n    setTimeout(function () {\n      done()\n    }, 1000)\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "e6d7582b-5c9d-493b-9a62-6f96beddbeee",
            "parentUUID": "764c5086-4c77-4ad6-8bbd-a99328172680",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "UT02: API \"after all\" hook",
            "timedOut": false,
            "duration": 1003,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.kill('SIGHUP')\nsetTimeout(function () {\n  fs.unlink(dbPath, function (error) {\n    if (error) {\n      done(error)\n    } else {\n      done()\n    }\n  })\n}, 1000)",
            "err": {},
            "isRoot": false,
            "uuid": "5562eaa1-3e1e-4766-8136-ef32ce034a83",
            "parentUUID": "764c5086-4c77-4ad6-8bbd-a99328172680",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.api.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "UT01: database",
        "suites": [
          {
            "title": "UT01-01: Object Contructor",
            "suites": [],
            "tests": [
              {
                "title": "UT01-01-01: should return an error with no path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-01: should return an error with no path",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "df3e4dc9-7da0-4d78-83b0-8cbe0cedba85",
                "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: should return an database object with a correct path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
                "err": {},
                "isRoot": false,
                "uuid": "145f3df7-f545-45ab-811c-adbccf548d33",
                "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-01-01: should return an error with no path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-01: should return an error with no path",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "df3e4dc9-7da0-4d78-83b0-8cbe0cedba85",
                "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: should return an database object with a correct path",
                "fullTitle": "UT01: database UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
                "err": {},
                "isRoot": false,
                "uuid": "145f3df7-f545-45ab-811c-adbccf548d33",
                "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "UT01-02: database.list",
            "suites": [],
            "tests": [
              {
                "title": "UT01-02-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "160db3f5-c7b6-4c4e-98d1-3f202133a4fe",
                "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-02-02: should callback all entries",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-02: should callback all entries",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "04afb22d-35fd-444c-a670-3b17ea219cb6",
                "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "UT01: database UT01-02: database.list \"before all\" hook",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "b95cb350-8e74-4e88-83b5-efab7f6a99f0",
                "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-02-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "160db3f5-c7b6-4c4e-98d1-3f202133a4fe",
                "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-02-02: should callback all entries",
                "fullTitle": "UT01: database UT01-02: database.list UT01-02-02: should callback all entries",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "04afb22d-35fd-444c-a670-3b17ea219cb6",
                "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT01-03: database.types",
            "suites": [],
            "tests": [
              {
                "title": "UT01-03-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-03: database.types UT01-03-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.types()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "62ded272-a163-4e80-acdf-03b72a5b120e",
                "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-02: should callback all types",
                "fullTitle": "UT01: database UT01-03: database.types UT01-03-02: should callback all types",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.types(function (error, types) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(types.length, 2)\n    if (types.indexOf('mp3') < 0) {\n      done(new Error('Source mp3 missing'))\n    } else {\n      if (types.indexOf('youtube') < 0) {\n        done(new Error('Source youtube missing'))\n      } else {\n        done()\n      }\n    }\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a32d796c-5608-4d1f-950a-9dbc0f103d93",
                "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-03-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-03: database.types UT01-03-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.types()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "62ded272-a163-4e80-acdf-03b72a5b120e",
                "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-02: should callback all types",
                "fullTitle": "UT01: database UT01-03: database.types UT01-03-02: should callback all types",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.types(function (error, types) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(types.length, 2)\n    if (types.indexOf('mp3') < 0) {\n      done(new Error('Source mp3 missing'))\n    } else {\n      if (types.indexOf('youtube') < 0) {\n        done(new Error('Source youtube missing'))\n      } else {\n        done()\n      }\n    }\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a32d796c-5608-4d1f-950a-9dbc0f103d93",
                "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "UT01-04: database.getEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-04-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "dd2d2d1f-97f5-434c-a78a-297a34847e10",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-02: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4bd4550d-d58e-4232-be44-16e6bf9c5a0f",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-03: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "82a66508-0bd9-4d00-885c-d97d7fa18b79",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-04: should callback an object with a correct id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ddf923db-af90-43ab-9095-bf5d88618c9e",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "afa01b9d-f834-41e5-999e-4cffc10256de",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-04: database.getEntry \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "5b7d4ba7-9140-4a9a-b5ca-6af9f21bc7b9",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-04: database.getEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "c88918fc-e5f9-4763-8229-7ef8118f93fa",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-04-01: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "dd2d2d1f-97f5-434c-a78a-297a34847e10",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-02: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4bd4550d-d58e-4232-be44-16e6bf9c5a0f",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-03: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "82a66508-0bd9-4d00-885c-d97d7fa18b79",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-04: should callback an object with a correct id given",
                "fullTitle": "UT01: database UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ddf923db-af90-43ab-9095-bf5d88618c9e",
                "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "UT01-05: database.addEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-05-01: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5f9cbe46-89e7-40f0-b84b-c8e6b7b42dcc",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5c55693d-f7ca-49b5-a788-cdab988bba8e",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-03: should callback an object with data given and database should contain this object",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2e43a915-049a-4051-bdc6-109dc648aa6b",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "b1e0d817-9ee5-4164-a558-41170771797f",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-05: database.addEntry \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "d0307b1d-d3a2-4cb1-b0f7-cc41ea5b4187",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-05: database.addEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "71ff1e12-13f2-484c-a7b6-9fd29729d95e",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-05-01: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5f9cbe46-89e7-40f0-b84b-c8e6b7b42dcc",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5c55693d-f7ca-49b5-a788-cdab988bba8e",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-05-03: should callback an object with data given and database should contain this object",
                "fullTitle": "UT01: database UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2e43a915-049a-4051-bdc6-109dc648aa6b",
                "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6,
            "rootEmpty": false
          },
          {
            "title": "UT01-06: database.updateEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-06-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4905ff89-dedf-4ddd-9c15-1020d49df917",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-02: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "e450abfe-4b3e-46ce-9f25-a5041b6f2617",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-03: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "b44eca0a-9bb6-4b12-a676-6dfdddf1275a",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-04: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ea188c0a-e30d-43b3-97f5-f9ccb49a3871",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e906899c-49ea-42eb-a74a-273c3858eed6",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-06: database.updateEntry \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "29cc223a-42d9-467a-bbf4-b4b990c2a787",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-06: database.updateEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "fd8ff43c-3d80-49cf-9ada-286c1c1959d2",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-06-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4905ff89-dedf-4ddd-9c15-1020d49df917",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-02: should throw an error with no data given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "e450abfe-4b3e-46ce-9f25-a5041b6f2617",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-03: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "b44eca0a-9bb6-4b12-a676-6dfdddf1275a",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-04: should callback an error with a not existing id given",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ea188c0a-e30d-43b3-97f5-f9ccb49a3871",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
                "fullTitle": "UT01: database UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e906899c-49ea-42eb-a74a-273c3858eed6",
                "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          },
          {
            "title": "UT01-07: database.deleteEntry",
            "suites": [],
            "tests": [
              {
                "title": "UT01-07-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "8128d610-7af2-4315-bfcf-4fd1423fb36f",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "09fa3672-8b7b-4ee5-a594-dc5fc07ebf1a",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-03: should callback true with id given and database should not contain this object",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "268b6955-b3c9-4758-a2e8-829f6e1ac6ac",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.database.js",
            "uuid": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = new Database(dbPath, uuid)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "bc2093f6-dc80-4a90-97e4-a17ce38d05e3",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Tdatabase = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "dc05d924-902d-4ac9-8c5e-0622e3208b3c",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
            "passes": [
              {
                "title": "UT01-07-01: should throw an error with no id given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "8128d610-7af2-4315-bfcf-4fd1423fb36f",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-02: should throw an error with no callback given",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "09fa3672-8b7b-4ee5-a594-dc5fc07ebf1a",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-07-03: should callback true with id given and database should not contain this object",
                "fullTitle": "UT01: database UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "268b6955-b3c9-4758-a2e8-829f6e1ac6ac",
                "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/test.database.js",
        "uuid": "5f7fd579-56e1-446c-bd38-c2b5ecd6ca29",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: UT01-00: Copy TestDatabase",
            "fullTitle": "UT01: database \"before all\" hook: UT01-00: Copy TestDatabase",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.copyFile(dbSourcePath, dbPath, function (err) {\n  if (err) {\n    done(err)\n  } else {\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "dab98c58-39a0-4c3c-85b5-fec12245e9ba",
            "parentUUID": "5f7fd579-56e1-446c-bd38-c2b5ecd6ca29",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: UT01-99: remove Copy of Database",
            "fullTitle": "UT01: database \"after all\" hook: UT01-99: remove Copy of Database",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.unlink(dbPath, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "cf6c6174-e5e1-417a-bc54-20092526fbf1",
            "parentUUID": "5f7fd579-56e1-446c-bd38-c2b5ecd6ca29",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/mnt/c/Users/sigmu/Code/timo/data/tests/test.database.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "a1db3f2a-5a3c-43b1-8335-46452e7a6738",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "UT02-01-01: Should List all Entries",
      "fullTitle": "UT02-01: GET / UT02-01-01: Should List all Entries",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "30aa7f03-2af3-4bc4-8e17-447c26beb1b7",
      "parentUUID": "7cac05c4-d1c4-4260-83a9-65581b873359",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Should List all types",
      "fullTitle": "UT02-02: GET /types UT02-02-01: Should List all types",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/types').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('mp3') < 0) {\n    done(new Error('Type mp3 missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Type youtube missing'))\n  }\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "696708db-467a-4940-8b44-0c0fb02f9bd3",
      "parentUUID": "c23b62c9-8e1e-4303-b83c-6d8b284d6ec2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Should get entry by id",
      "fullTitle": "UT02-03: GET /:id UT02-03-01: Should get entry by id",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "29083d6b-2dae-48c0-9e3c-e53f1b8af932",
      "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Should get 404 on wrong id",
      "fullTitle": "UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7183f976-f197-414e-a339-aa7b6ace1672",
      "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Should Add an Entry",
      "fullTitle": "UT02-04: POST / UT02-04-01: Should Add an Entry",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "4fde1ae3-bfad-4f8f-b880-1964354ff668",
      "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-02: Should Error on no Data in Post",
      "fullTitle": "UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "bcd92840-71d7-4870-94a4-6f043b61d4ab",
      "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Should Update an Entry",
      "fullTitle": "UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "57fe7322-04ba-4376-8ee7-eed076198084",
      "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-02: Should Error on no Data in PUT",
      "fullTitle": "UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "8e6159f4-b30c-4709-b6ca-b1110795eff3",
      "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-03: Should Error on wrong ID",
      "fullTitle": "UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "f70fab21-98fb-4f40-9a2b-34d03d3d7bd4",
      "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Should Delete an Entry",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-01: Should Delete an Entry",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "2f7dde1e-3e65-4820-8d79-6f9af7798a08",
      "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-02: Should Error on wrong ID",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "956ce1b4-e696-4ac2-9f49-2ac19fbf558c",
      "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-01: should return an error with no path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-01: should return an error with no path",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "df3e4dc9-7da0-4d78-83b0-8cbe0cedba85",
      "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: should return an database object with a correct path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
      "err": {},
      "isRoot": false,
      "uuid": "145f3df7-f545-45ab-811c-adbccf548d33",
      "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: should throw an error with no callback given",
      "fullTitle": "UT01-02: database.list UT01-02-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "160db3f5-c7b6-4c4e-98d1-3f202133a4fe",
      "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-02: should callback all entries",
      "fullTitle": "UT01-02: database.list UT01-02-02: should callback all entries",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "04afb22d-35fd-444c-a670-3b17ea219cb6",
      "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-01: should throw an error with no callback given",
      "fullTitle": "UT01-03: database.types UT01-03-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.types()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "62ded272-a163-4e80-acdf-03b72a5b120e",
      "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-02: should callback all types",
      "fullTitle": "UT01-03: database.types UT01-03-02: should callback all types",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.types(function (error, types) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(types.length, 2)\n    if (types.indexOf('mp3') < 0) {\n      done(new Error('Source mp3 missing'))\n    } else {\n      if (types.indexOf('youtube') < 0) {\n        done(new Error('Source youtube missing'))\n      } else {\n        done()\n      }\n    }\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a32d796c-5608-4d1f-950a-9dbc0f103d93",
      "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-01: should throw an error with no callback given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "dd2d2d1f-97f5-434c-a78a-297a34847e10",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-02: should throw an error with no id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4bd4550d-d58e-4232-be44-16e6bf9c5a0f",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-03: should callback an error with a not existing id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "82a66508-0bd9-4d00-885c-d97d7fa18b79",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-04: should callback an object with a correct id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "ddf923db-af90-43ab-9095-bf5d88618c9e",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-01: should throw an error with no data given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "5f9cbe46-89e7-40f0-b84b-c8e6b7b42dcc",
      "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-02: should throw an error with no callback given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "5c55693d-f7ca-49b5-a788-cdab988bba8e",
      "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-03: should callback an object with data given and database should contain this object",
      "fullTitle": "UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "2e43a915-049a-4051-bdc6-109dc648aa6b",
      "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-01: should throw an error with no id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4905ff89-dedf-4ddd-9c15-1020d49df917",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-02: should throw an error with no data given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "e450abfe-4b3e-46ce-9f25-a5041b6f2617",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-03: should throw an error with no callback given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "b44eca0a-9bb6-4b12-a676-6dfdddf1275a",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-04: should callback an error with a not existing id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "ea188c0a-e30d-43b3-97f5-f9ccb49a3871",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e906899c-49ea-42eb-a74a-273c3858eed6",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-01: should throw an error with no id given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "8128d610-7af2-4315-bfcf-4fd1423fb36f",
      "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-02: should throw an error with no callback given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "09fa3672-8b7b-4ee5-a594-dc5fc07ebf1a",
      "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-03: should callback true with id given and database should not contain this object",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "268b6955-b3c9-4758-a2e8-829f6e1ac6ac",
      "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "UT02-01-01: Should List all Entries",
      "fullTitle": "UT02-01: GET / UT02-01-01: Should List all Entries",
      "timedOut": false,
      "duration": 49,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 3)\n  assert.equal(result[0].id, object1.id)\n  assert.equal(result[1].id, object2.id)\n  assert.equal(result[2].id, object3.id)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "30aa7f03-2af3-4bc4-8e17-447c26beb1b7",
      "parentUUID": "7cac05c4-d1c4-4260-83a9-65581b873359",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Should List all types",
      "fullTitle": "UT02-02: GET /types UT02-02-01: Should List all types",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/types').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.length, 2)\n  if (result.indexOf('mp3') < 0) {\n    done(new Error('Type mp3 missing'))\n  }\n  if (result.indexOf('youtube') < 0) {\n    done(new Error('Type youtube missing'))\n  }\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "696708db-467a-4940-8b44-0c0fb02f9bd3",
      "parentUUID": "c23b62c9-8e1e-4303-b83c-6d8b284d6ec2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Should get entry by id",
      "fullTitle": "UT02-03: GET /:id UT02-03-01: Should get entry by id",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/' + object1.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object1.id)\n  assert.equal(result.link, object1.link)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "29083d6b-2dae-48c0-9e3c-e53f1b8af932",
      "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Should get 404 on wrong id",
      "fullTitle": "UT02-03: GET /:id UT02-03-02: Should get 404 on wrong id",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7183f976-f197-414e-a339-aa7b6ace1672",
      "parentUUID": "8262c67e-f967-4d32-a036-b520d0bb8837",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Should Add an Entry",
      "fullTitle": "UT02-04: POST / UT02-04-01: Should Add an Entry",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send(object4).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.CREATED)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object4.id)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "4fde1ae3-bfad-4f8f-b880-1964354ff668",
      "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-02: Should Error on no Data in Post",
      "fullTitle": "UT02-04: POST / UT02-04-02: Should Error on no Data in Post",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.post(uri + '/').send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "bcd92840-71d7-4870-94a4-6f043b61d4ab",
      "parentUUID": "2a1218a6-e3fc-4c48-9e17-2216c5acaccb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Should Update an Entry",
      "fullTitle": "UT02-05: PUT /:id UT02-05-01: Should Update an Entry",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send(object5).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result.id, object5.id)\n  assert.equal(result.link, object5.link)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 4)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    assert.equal(result[3].id, object4.id)\n    assert.equal(result[3].id, object5.id)\n    assert.equal(result[3].link, object5.link)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "57fe7322-04ba-4376-8ee7-eed076198084",
      "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-02: Should Error on no Data in PUT",
      "fullTitle": "UT02-05: PUT /:id UT02-05-02: Should Error on no Data in PUT",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + object4.id).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "8e6159f4-b30c-4709-b6ca-b1110795eff3",
      "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-03: Should Error on wrong ID",
      "fullTitle": "UT02-05: PUT /:id UT02-05-03: Should Error on wrong ID",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/someid').send(object4).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 4)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      assert.equal(result[3].id, object4.id)\n      assert.equal(result[3].link, object5.link)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "f70fab21-98fb-4f40-9a2b-34d03d3d7bd4",
      "parentUUID": "3c4d45e3-762e-49c1-a7e2-8367e2548a21",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Should Delete an Entry",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-01: Should Delete an Entry",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/' + object4.id).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(result, true)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(result.length, 3)\n    assert.equal(result[0].id, object1.id)\n    assert.equal(result[1].id, object2.id)\n    assert.equal(result[2].id, object3.id)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "2f7dde1e-3e65-4820-8d79-6f9af7798a08",
      "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-02: Should Error on wrong ID",
      "fullTitle": "UT02-06: DELETE /:id UT02-06-02: Should Error on wrong ID",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.delete(uri + '/someid').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(result.length, 3)\n      assert.equal(result[0].id, object1.id)\n      assert.equal(result[1].id, object2.id)\n      assert.equal(result[2].id, object3.id)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "956ce1b4-e696-4ac2-9f49-2ac19fbf558c",
      "parentUUID": "d52154ac-c69b-433d-8186-02c4a318b865",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-01: should return an error with no path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-01: should return an error with no path",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Database()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "df3e4dc9-7da0-4d78-83b0-8cbe0cedba85",
      "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: should return an database object with a correct path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-02: should return an database object with a correct path",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  var database = new Database(dbPath, uuid)\n  assert.equal(database.file, dbPath)\n  assert.equal(database.entries.length, 3)\n  done()\n} catch (error) {\n  done(error)\n}",
      "err": {},
      "isRoot": false,
      "uuid": "145f3df7-f545-45ab-811c-adbccf548d33",
      "parentUUID": "8f95bfa8-b075-43c8-ae49-4c028d0054e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: should throw an error with no callback given",
      "fullTitle": "UT01-02: database.list UT01-02-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "160db3f5-c7b6-4c4e-98d1-3f202133a4fe",
      "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-02: should callback all entries",
      "fullTitle": "UT01-02: database.list UT01-02-02: should callback all entries",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.list(function (error, entries) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entries.length, 3)\n    assert.equal(entries[0].id, object1.id)\n    assert.equal(entries[1].id, object2.id)\n    assert.equal(entries[2].id, object3.id)\n    Tdatabase = {}\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "04afb22d-35fd-444c-a670-3b17ea219cb6",
      "parentUUID": "46d2c17d-aaf7-4da7-922f-b7c1f1035096",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-01: should throw an error with no callback given",
      "fullTitle": "UT01-03: database.types UT01-03-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\ntry {\n  Tdatabase.types()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "62ded272-a163-4e80-acdf-03b72a5b120e",
      "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-02: should callback all types",
      "fullTitle": "UT01-03: database.types UT01-03-02: should callback all types",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase = new Database(dbPath, uuid)\nTdatabase.types(function (error, types) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(types.length, 2)\n    if (types.indexOf('mp3') < 0) {\n      done(new Error('Source mp3 missing'))\n    } else {\n      if (types.indexOf('youtube') < 0) {\n        done(new Error('Source youtube missing'))\n      } else {\n        done()\n      }\n    }\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a32d796c-5608-4d1f-950a-9dbc0f103d93",
      "parentUUID": "22d69e07-c8bd-43db-889b-f04e8e1f8ce5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-01: should throw an error with no callback given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry(object1.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "dd2d2d1f-97f5-434c-a78a-297a34847e10",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-02: should throw an error with no id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-02: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.getEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4bd4550d-d58e-4232-be44-16e6bf9c5a0f",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-03: should callback an error with a not existing id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-03: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Entry with id # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "82a66508-0bd9-4d00-885c-d97d7fa18b79",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-04: should callback an object with a correct id given",
      "fullTitle": "UT01-04: database.getEntry UT01-04-04: should callback an object with a correct id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.getEntry(object1.id, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(object1.id, entry.id)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "ddf923db-af90-43ab-9095-bf5d88618c9e",
      "parentUUID": "afa01b9d-f834-41e5-999e-4cffc10256de",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-01: should throw an error with no data given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-01: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "5f9cbe46-89e7-40f0-b84b-c8e6b7b42dcc",
      "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-02: should throw an error with no callback given",
      "fullTitle": "UT01-05: database.addEntry UT01-05-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.addEntry(object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "5c55693d-f7ca-49b5-a788-cdab988bba8e",
      "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-05-03: should callback an object with data given and database should contain this object",
      "fullTitle": "UT01-05: database.addEntry UT01-05-03: should callback an object with data given and database should contain this object",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.addEntry(object4, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "2e43a915-049a-4051-bdc6-109dc648aa6b",
      "parentUUID": "b1e0d817-9ee5-4164-a558-41170771797f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-01: should throw an error with no id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4905ff89-dedf-4ddd-9c15-1020d49df917",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-02: should throw an error with no data given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-02: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object5.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "e450abfe-4b3e-46ce-9f25-a5041b6f2617",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-03: should throw an error with no callback given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-03: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.updateEntry(object3.id, object4)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "b44eca0a-9bb6-4b12-a676-6dfdddf1275a",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-04: should callback an error with a not existing id given",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-04: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry('#', object5, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "ea188c0a-e30d-43b3-97f5-f9ccb49a3871",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-06-05: should callback an object with id given and database should contain this changed object",
      "fullTitle": "UT01-06: database.updateEntry UT01-06-05: should callback an object with id given and database should contain this changed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.updateEntry(object4.id, object5, function (error, entry) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(entry.id, object4.id)\n    assert.equal(entry.id, object5.id)\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 4)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        assert.equal(entries[3].id, object4.id)\n        assert.equal(entries[3].link, object5.link)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "e906899c-49ea-42eb-a74a-273c3858eed6",
      "parentUUID": "4a7697a2-11b0-437f-88c7-3eaff36577a6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-01: should throw an error with no id given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "8128d610-7af2-4315-bfcf-4fd1423fb36f",
      "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-02: should throw an error with no callback given",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-02: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Tdatabase.deleteEntry(object4.id)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "09fa3672-8b7b-4ee5-a594-dc5fc07ebf1a",
      "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-07-03: should callback true with id given and database should not contain this object",
      "fullTitle": "UT01-07: database.deleteEntry UT01-07-03: should callback true with id given and database should not contain this object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Tdatabase.deleteEntry(object4.id, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    Tdatabase.list(function (error, entries) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(entries.length, 3)\n        assert.equal(entries[0].id, object1.id)\n        assert.equal(entries[1].id, object2.id)\n        assert.equal(entries[2].id, object3.id)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "268b6955-b3c9-4758-a2e8-829f6e1ac6ac",
      "parentUUID": "7f72756d-3265-41e3-bbd9-b2484b7c1c4a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}